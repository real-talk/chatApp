"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var codegen_1 = require("../codegen");
var graphql_codegen_core_1 = require("graphql-codegen-core");
var helpers_1 = require("../helpers");
var isValidPath = require("is-valid-path");
var isGlob = require("is-glob");
var logSymbols = require("log-symbols");
function log(msg) {
    // double spaces to inline the message with Listr
    graphql_codegen_core_1.getLogger().info("  " + msg);
}
function emitWatching() {
    log(logSymbols.info + " Watching for changes...");
}
exports.createWatcher = function (config, onNext) {
    graphql_codegen_core_1.debugLog("[Watcher] Starting watcher...");
    var files = [];
    var documents = helpers_1.normalizeInstanceOrArray(config.documents);
    var schemas = helpers_1.normalizeInstanceOrArray(config.schema);
    // Add schemas and documents from "generates"
    Object.keys(config.generates)
        .map(function (filename) { return helpers_1.normalizeOutputParam(config.generates[filename]); })
        .forEach(function (conf) {
        schemas.push.apply(schemas, helpers_1.normalizeInstanceOrArray(conf.schema));
        documents.push.apply(documents, helpers_1.normalizeInstanceOrArray(conf.documents));
    });
    if (documents) {
        documents.forEach(function (doc) {
            if (typeof doc === 'string') {
                files.push(doc);
            }
            else {
                files.push.apply(files, Object.keys(doc));
            }
        });
    }
    schemas.forEach(function (schema) {
        if (isGlob(schema) || isValidPath(schema)) {
            files.push(schema);
        }
    });
    var watcher;
    var runWatcher = function () { return __awaiter(_this, void 0, void 0, function () {
        var chokidar, isShutdown, shutdown;
        var _this = this;
        return __generator(this, function (_a) {
            chokidar = require('chokidar');
            emitWatching();
            watcher = chokidar.watch(files, {
                persistent: true,
                ignoreInitial: true,
                followSymlinks: true,
                cwd: process.cwd(),
                disableGlobbing: false,
                usePolling: true,
                interval: 100,
                binaryInterval: 300,
                depth: 99,
                awaitWriteFinish: true,
                ignorePermissionErrors: false,
                atomic: true
            });
            graphql_codegen_core_1.debugLog("[Watcher] Started");
            isShutdown = false;
            shutdown = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    isShutdown = true;
                    graphql_codegen_core_1.debugLog("[Watcher] Shutting down");
                    log("Shutting down watch...");
                    watcher.close();
                    return [2 /*return*/];
                });
            }); };
            // it doesn't matter what has changed, need to run whole process anyway
            watcher.on('all', function () {
                if (!isShutdown) {
                    codegen_1.executeCodegen(config)
                        .then(onNext, function () { return Promise.resolve(); })
                        .then(function () { return emitWatching(); });
                }
            });
            process.once('SIGINT', shutdown);
            process.once('SIGTERM', shutdown);
            return [2 /*return*/];
        });
    }); };
    // the promise never resolves to keep process running
    return new Promise(function (_, reject) {
        codegen_1.executeCodegen(config)
            .then(onNext, function () { return Promise.resolve(); })
            .then(runWatcher)
            .catch(function (err) {
            watcher.close();
            reject(err);
        });
    });
};
//# sourceMappingURL=watcher.js.map