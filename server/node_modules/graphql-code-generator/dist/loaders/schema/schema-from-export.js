"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path_1 = require("path");
var isValidPath = require("is-valid-path");
var graphql_1 = require("graphql");
var graphql_codegen_core_1 = require("graphql-codegen-core");
var errors_1 = require("../../errors");
var SchemaFromExport = /** @class */ (function () {
    function SchemaFromExport() {
    }
    SchemaFromExport.prototype.canHandle = function (pointerToSchema) {
        var fullPath = path_1.isAbsolute(pointerToSchema) ? pointerToSchema : path_1.resolve(process.cwd(), pointerToSchema);
        return isValidPath(pointerToSchema) && fs_1.existsSync(fullPath) && path_1.extname(pointerToSchema) !== '.json';
    };
    SchemaFromExport.prototype.handle = function (file, config, schemaOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var fullPath, exports_1, rawExport, schema, schemaResult, e_1, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fullPath = path_1.isAbsolute(file) ? file : path_1.resolve(process.cwd(), file);
                        if (!fs_1.existsSync(fullPath)) return [3 /*break*/, 13];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 11, , 12]);
                        exports_1 = require(fullPath);
                        if (!exports_1) return [3 /*break*/, 9];
                        rawExport = exports_1.default || exports_1.schema || exports_1;
                        if (!rawExport) return [3 /*break*/, 7];
                        return [4 /*yield*/, rawExport];
                    case 2:
                        schema = _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.resolveSchema(schema)];
                    case 4:
                        schemaResult = _a.sent();
                        return [2 /*return*/, schemaResult];
                    case 5:
                        e_1 = _a.sent();
                        graphql_codegen_core_1.debugLog('Unexpected exception while trying to figure out the schema: ', e_1);
                        throw new Error('Exported schema must be of type GraphQLSchema, text, AST, or introspection JSON.');
                    case 6: return [3 /*break*/, 8];
                    case 7: throw new Error("Invalid export from export file " + fullPath + ": missing default export or 'schema' export!");
                    case 8: return [3 /*break*/, 10];
                    case 9: throw new Error("Invalid export from export file " + fullPath + ": empty export!");
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        e_2 = _a.sent();
                        throw new errors_1.DetailedError(e_2.message, e_2.stack, fullPath);
                    case 12: return [3 /*break*/, 14];
                    case 13: throw new Error("Unable to locate introspection from export file: " + fullPath);
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    SchemaFromExport.prototype.isSchemaText = function (obj) {
        return typeof obj === 'string';
    };
    SchemaFromExport.prototype.isSchemaJson = function (obj) {
        var json = obj;
        return json.data !== undefined && json.data.__schema !== undefined;
    };
    SchemaFromExport.prototype.isSchemaObject = function (obj) {
        return obj instanceof graphql_1.GraphQLSchema;
    };
    SchemaFromExport.prototype.isSchemaAst = function (obj) {
        return obj.kind !== undefined;
    };
    SchemaFromExport.prototype.isPromise = function (obj) {
        return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
    };
    SchemaFromExport.prototype.resolveSchema = function (schema) {
        return __awaiter(this, void 0, void 0, function () {
            var ast;
            return __generator(this, function (_a) {
                if (this.isSchemaObject(schema)) {
                    return [2 /*return*/, schema];
                }
                else if (this.isSchemaAst(schema)) {
                    return [2 /*return*/, graphql_1.buildASTSchema(schema)];
                }
                else if (this.isSchemaText(schema)) {
                    ast = graphql_1.parse(schema);
                    return [2 /*return*/, graphql_1.buildASTSchema(ast)];
                }
                else if (this.isSchemaJson(schema)) {
                    return [2 /*return*/, graphql_1.buildClientSchema(schema.data)];
                }
                else {
                    throw new Error('Unexpected schema type provided!');
                }
                return [2 /*return*/];
            });
        });
    };
    return SchemaFromExport;
}());
exports.SchemaFromExport = SchemaFromExport;
//# sourceMappingURL=schema-from-export.js.map