"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var request_1 = require("request");
var valid_url_1 = require("valid-url");
var IntrospectionFromUrlLoader = /** @class */ (function () {
    function IntrospectionFromUrlLoader() {
    }
    IntrospectionFromUrlLoader.prototype.canHandle = function (pointerToSchema) {
        return !!valid_url_1.isUri(pointerToSchema);
    };
    IntrospectionFromUrlLoader.prototype.handle = function (url, config, schemaOptions) {
        // spinner.info(`Loading GraphQL Introspection from remote: ${url}...`);
        graphql_codegen_core_1.debugLog("[Schema Loader] Loading GraphQL Introspection from remote " + url);
        var headers = {};
        if (Array.isArray(schemaOptions.headers)) {
            headers = schemaOptions.headers.reduce(function (prev, v) { return (__assign({}, prev, v)); }, {});
        }
        else if (typeof schemaOptions.headers === 'object') {
            headers = schemaOptions.headers;
        }
        var extraHeaders = __assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, headers);
        graphql_codegen_core_1.debugLog("Executing POST to " + url + " with headers: ", extraHeaders);
        return new Promise(function (resolve, reject) {
            request_1.post({
                url: url,
                json: {
                    query: graphql_codegen_core_1.introspectionQuery
                },
                headers: extraHeaders
            }, function (err, _response, body) {
                if (err) {
                    reject(err);
                    return;
                }
                var bodyJson = body.data;
                var errorMessage;
                if (body.errors && body.errors.length > 0) {
                    errorMessage = body.errors.map(function (item) { return item.message; }).join(', ');
                }
                else if (!bodyJson) {
                    errorMessage = body;
                }
                if (errorMessage) {
                    reject('Unable to download schema from remote: ' + errorMessage);
                    return;
                }
                graphql_codegen_core_1.validateIntrospection(bodyJson);
                resolve(graphql_codegen_core_1.introspectionToGraphQLSchema(bodyJson));
            });
        });
    };
    return IntrospectionFromUrlLoader;
}());
exports.IntrospectionFromUrlLoader = IntrospectionFromUrlLoader;
//# sourceMappingURL=introspection-from-url.js.map