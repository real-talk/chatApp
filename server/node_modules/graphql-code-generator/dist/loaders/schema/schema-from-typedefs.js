"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var isGlob = require("is-glob");
var isValidPath = require("is-valid-path");
var graphql_1 = require("graphql");
var glob = require("glob");
var fs_1 = require("fs");
var path_1 = require("path");
var errors_1 = require("../../errors");
var documents_from_glob_1 = require("../documents/documents-from-glob");
var epoxy_1 = require("@graphql-modules/epoxy");
var document_finder_1 = require("../../utils/document-finder");
function isGraphQLFile(globPath) {
    return documents_from_glob_1.graphQLExtensions.some(function (ext) { return globPath.endsWith(ext); });
}
function loadSchemaFile(filepath) {
    var content = fs_1.readFileSync(filepath, {
        encoding: 'utf-8'
    });
    if (/^\# import /i.test(content.trimLeft())) {
        graphql_codegen_core_1.debugLog("[Schema Loader] Using 'graphql-import' package");
        var importSchema = require('graphql-import').importSchema;
        return importSchema(filepath);
    }
    var foundDoc = document_finder_1.extractDocumentStringFromCodeFile(new graphql_1.Source(content, filepath));
    if (foundDoc) {
        return foundDoc;
    }
    return content;
}
var SchemaFromTypedefs = /** @class */ (function () {
    function SchemaFromTypedefs() {
    }
    SchemaFromTypedefs.prototype.canHandle = function (globPath) {
        return isGlob(globPath) || (isValidPath(globPath) && isGraphQLFile(globPath));
    };
    SchemaFromTypedefs.prototype.handle = function (globPath, config, schemaOptions) {
        var _this = this;
        var globFiles = glob.sync(globPath, { cwd: process.cwd() });
        if (!globFiles || globFiles.length === 0) {
            throw new errors_1.DetailedError('Unable to find matching files', "\n      \n        Unable to find matching files for glob: " + globPath + " in directory: " + process.cwd() + "\n      ");
        }
        if (globFiles.length > 1) {
            return epoxy_1.mergeGraphQLSchemas(globFiles.map(function (filePath) { return _this.loadFileContent(filePath); }).filter(function (f) { return f; }));
        }
        else {
            return graphql_1.parse(loadSchemaFile(globFiles[0]));
        }
    };
    SchemaFromTypedefs.prototype.loadFileContent = function (filePath) {
        var fileContent = fs_1.readFileSync(filePath, 'utf8');
        var fileExt = path_1.extname(filePath);
        if (documents_from_glob_1.graphQLExtensions.includes(fileExt)) {
            return new graphql_1.Source(fileContent, filePath);
        }
        var foundDoc = document_finder_1.extractDocumentStringFromCodeFile(new graphql_1.Source(fileContent, filePath));
        if (foundDoc) {
            return new graphql_1.Source(foundDoc, filePath);
        }
        return null;
    };
    return SchemaFromTypedefs;
}());
exports.SchemaFromTypedefs = SchemaFromTypedefs;
//# sourceMappingURL=schema-from-typedefs.js.map